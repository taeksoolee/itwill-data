<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션을 사용하여 컨트롤러 
	클래스를 작성할 수 있는 기능을 제공하는 어노테이션 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : Front Controller를 사용하지 않고 직접 요청을 받아 응답 처리되도록 설정하는 엘리먼트 - 리소스 파일 -->
	<!-- mapping 속성 : 리소스 파일을 요청할 수 있는 URL 패턴을 속성값으로 설정 -->
	<!-- location 속성 : 리소스 파일이 저장된 디렉토리 경로를 속성값으로 설정 -->
	<!-- <resources mapping="/resources/**" location="/resources/"/> -->
	<resources mapping="/images/**" location="/resources/images/"/>
	<resources mapping="/css/**" location="/resources/css/"/>
	<resources mapping="/js/**" location="/resources/js/"/>
	<resources mapping="/upload/**" location="/resources/upload/"/>

	<!-- BeanNameViewResolver : 요청처리 메소드에서 beanName를 제공받아	해당
	Spring Bean의 메소드를 호출하여 실행하는 기능을 제공하는 ViewResolver -->
	<!-- => JSP를 이용한 응답이 아닌 명령 실행을 목적으로 하는 ViewResolver -->
	<!-- => 출력이 목적인 ViewResolver 보다 우선순위가 높도록 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"/>
	</beans:bean>

	<!-- UrlBasedViewResolver : Spring에서 제공하는 ViewResolver를 사용하지
	않고 외부에서 제공하는 ViewResolver를 사용하는 기능을 제공하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 외부에서 제공하는 ViewResolver 클래스명을 인젝션 처리  -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 우선순위 관련 정수값을 인젝션 처리 -->
		<!-- => 정수값이 낮을수록 우선순위가 높게 설정 -->		
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- TilesConfigurer : TilesView 프로그램에서 사용할 뷰페이지 정보를 제공하는 XML 파일 정보를 저장한 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 XML 파일 경로를 배열에 저장하여 인젝션 처리 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- bean : 클래스를 Spring Bean으로 등록하는 엘리먼트 -->
	<!-- InternalResourceViewResolver : 요청처리 메소드에서 반환된 ViewName을
	응답 처리하기 위한 JSP 문서로 변환하여 제공하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
	
	<!-- <context:component-scan base-package="site.itwill.controller"/> -->
	<context:component-scan base-package="site.itwill10.controller"/>
	<context:component-scan base-package="site.itwill10.dao"/>
	<context:component-scan base-package="site.itwill10.service"/>
	
	<!-- AOP 기능을 이용한 트렌젝션 처리 -->
	<!-- advice : TransactionManager 관련 Spring Bean을 Advisor로 설정하는 엘리먼트 -->
	<!-- transaction-manager 속성 : TransactionManager 관련 Spring Bean의 beanName을 속성값으로 설정 -->
	<!-- attributes : 트렌젝션 처리 관련 정보를 설정하는 엘리먼트 -->	
	<!-- method : 트렌젝션 처리 메소드를 설정하는 엘리먼트 -->
	<!-- name 속성 : 메소드 패턴을 속성값으로 설정 -->
	<!-- rollback-for 속성 : ROLLBACK 명령을 실행하기 위한 예외를 속성값으로 설정 -->
	<!-- read-only 속성 : 읽기 전용 메소드인 경우 true를 속성값으로 설정 -->
	<!--  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception"/>
			<tx:method name="erase*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>		
	</tx:advice>
	-->
	
	<!-- TransactionManager로 생성된 Advisor를 사용하여 AOP 기능 구현 -->
	<!--  
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* site.itwill10.service..*(..))"/>
	</aop:config>
	-->
	
	<!-- 파일 업로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => beanName은 반드시 "multipartResolver"로 설정 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- maxUploadSize 필드에 업로드 파일의 용량 제한값(Byte)을 인젝션 처리 -->
		<beans:property name="maxUploadSize" value="20971520"/>
		<!-- defaultEncoding : 입력값에 대한 캐릭터셋의 인코딩을 인젝션 처리 -->
		<beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>
	
	<!-- 파일 다운로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => 요청처리 메소드에서 제공되는 viewName을 beanName으로 설정 -->
	<beans:bean class="site.itwill10.util.FileDownload" id="fileDownload"/>
	
	<!-- 인터셉터 클래스를 Spring Bean으로 등록 -->
	<beans:bean class="site.itwill10.util.AdminAuthInterceptor" id="adminAuthInterceptor"/>
	<beans:bean class="site.itwill10.util.LoginAuthInterceptor" id="loginAuthInterceptor"/>
	
	<!-- interceptors : 인터셉터를 설정하는 상위 엘리먼트 -->
	<interceptors>
		<!-- interceptor : 인터셉터를 등록하는 엘리먼트 -->
		<interceptor>
			<!-- mapping : 인터셉터 클래스의 메소드가 호출될 URL 자원을 등록하는 엘리먼트 -->
			<!-- path 속성 : 클라이언트가 요청하는 URL 자원을 속성값으로 설정 -->
			<mapping path="/userinfo/join"/>
			<mapping path="/userinfo/remove"/>
			<!-- ref : 클라이언트 요청에 의해 동작될 인터셉터 클래스의 Spring Bean를 설정하는 엘리먼트 -->
			<!-- bean 속성 : 인터셉터 클래스의 beanName을 속성값으로 설정 -->
			<beans:ref bean="adminAuthInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/userinfo/list"/>
			<mapping path="/userinfo/view"/>
			<mapping path="/userinfo/modify"/>
			<beans:ref bean="loginAuthInterceptor"/>
		</interceptor>
	</interceptors>
</beans:beans>






