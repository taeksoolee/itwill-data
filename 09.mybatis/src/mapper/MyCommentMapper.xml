<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.itwill.mapper.MyCommentMapper">
	<!-- cache : 검색결과를 임시 메모리에 저장하여 보다 빠른 검색결과 제공 -->
	<!-- => INSERT, UPDATE, DELETE 명령을 실행하여 캐시에 저장된 결과는 초기화 처리 -->
	<!-- => 검색결과를 저장하는 클래스는 반드시 객체직렬화 클래스로 선언 -->
	<!-- <cache/> -->

	<!--  
	<insert id="insertComment" parameterType="MyComment1">
		insert into mycomment values(mycomment_seq.nextval
			, #{commentId}, #{commentContent}, sysdate)
	</insert>
	-->

	<insert id="insertComment" parameterType="MyComment1">
		<!-- selectKey : 클래스 필드에 SELECT 명령의 검색 결과값을 저장하기 위한 엘리먼트 -->
		<!-- => insert 엘리먼트의 하위 엘리먼트로만 사용 가능  -->
		<!-- => 자동 증가값(난수값)을 검색하여 클래스 필드에 저장 - 자동 증가값을 로그에서 확인 가능 -->
		<!-- resultType 속성 : 검색 결과를 매핑하기 위한 Java 자료형을 속성값 설정 -->
		<!-- keyProperty 속성 : 저장할 클래스의 필드명을 속성값으로 설정 -->
		<!-- order 속성 : BEFORE(기본) 또는 AFTER 중 하나를 속성값으로 설정 -->
		<selectKey resultType="int" keyProperty="commentNo" order="BEFORE">
			select mycomment_seq.nextval from dual
		</selectKey>
		insert into mycomment values(#{commentNo}, #{commentId}, #{commentContent}, sysdate)
	</insert>
	
	<!-- 검색행의 컬럼값이 필드에 자동으로 매핑되어 저장 => 인스턴스 반환 -->
	<select id="selectCommentList1" resultType="MyComment1">
		select * from mycomment order by comment_no desc
	</select>
	
	<!-- 검색행의 컬럼명과 필드가 모두 다르므로 자동 매핑 처리 불가능 => NULL 반환 -->
	<!--  
	<select id="selectCommentList2" resultType="MyComment2">
		select * from mycomment order by comment_no desc
	</select>
	-->
	
	<!-- 검색행의 컬럼명 대신 필드와 같은 이름의 컬럼 별칭을 선언하여 검색 -->
	<!--  
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no no, comment_id id, comment_content content
			,comment_date "date" from mycomment order by comment_no desc
	</select>
	-->
	
	<!-- resultMap 엘리먼트를 이용하여 컬럼값을 클래스 필드에 매핑되도록 설정 -->
	<!-- => 기본 생성자로 인스턴스를 생성하고 컬럼값을 전달받아 Setter 메소드를 호출하여 필드값 변경 -->
	<!-- => id 엘리먼트 또는 result 엘리먼트를 이용하여 매핑 처리 -->	
	<resultMap type="MyComment2" id="myComment2ResultMap">
		<id column="comment_no" property="no"/>
		<result column="comment_id" property="id"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	
	<!-- 
	<select id="selectCommentList2" resultMap="myComment2ResultMap">
		select * from mycomment order by comment_no desc
	</select>
	-->
	 
	<!-- 매개변수가 선언된 생성자를 이용하여 검색결과를 필드에 매핑 처리 -->
	<!-- => 인스턴스를 생성할 때 컬럼값을 필드값으로 저장 --> 
	<resultMap type="MyComment2" id="myComment2ConstructorResultMap">
		<!-- constructor : 생성자를 이용하여 매핑 처리하기 위한 엘리먼트 -->
		<constructor>
			<!-- idArg : 컬럼값을 생성자의 매개변수에 전달하기 위한 엘리먼트 - PK 제약조건이 부여된 컬럼값 -->
			<!-- => 컬럼값이 매개변수에 순차적으로 전달되어 저장 -->
			<!-- => 엘리먼트의 갯수와 매개변수의 갯수가 반드시 같아야 된다. -->
			<!-- column 속성 : 생성자 매개변수에 전달하고자 하는 컬럼명을 속성값으로 설정 -->
			<!-- javaType 속성 : 생성자 매개변수의 Java 자료형을 속성값으로 설정 -->
			<idArg column="comment_no" javaType="_int"/>
			<!-- arg : 컬럼값을 생성자의 매개변수에 전달하기 위한 엘리먼트 -->
			<arg column="comment_id" javaType="string"/>
			<arg column="comment_content" javaType="string"/>
			<arg column="comment_date" javaType="string"/>
		</constructor>	
	</resultMap>
	
	<select id="selectCommentList2" resultMap="myComment2ConstructorResultMap">
		select * from mycomment order by comment_no desc
	</select> 
	
	<!--  
	<select id="selectCommentList3" resultType="MyComment3">
		select comment_no "no",comment_id "id",user_name "name",comment_content "content"
			,comment_date "date" from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	-->
	
	<resultMap type="MyComment3" id="myComment3ResultMap">
		<id column="comment_no" property="no"/>
		<!--  <result column="comment_id" property="id"/> -->
		<result column="user_id" property="id"/>
		<result column="user_name" property="name"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	
	<select id="selectCommentList3" resultMap="myComment3ResultMap">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<select id="selectCommentUserList1" resultType="MyCommentUser1">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<resultMap type="MyCommentUser2" id="MyCommentUser2ResultMap">
		<!-- association : 1:1 관계의 테이블 조인 검색행의 컬럼값을 
		포함 관계의 인스턴스 필드값으로 매핑 설정하기 위한 엘리먼트  -->
		<!-- property 속성 : 포함 인스턴스의 필드명을 속성값으로 설정 -->
		<!-- javaType 속성 : 포함 인스턴스의 필드의 클래스를 속성값으로 설정 -->
		<association property="comment" javaType="MyComment1" >
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>	
			<result column="comment_content" property="commentContent"/>	
			<result column="comment_date" property="commentDate"/>	
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>	
		</association>
	</resultMap>
	
	<select id="selectCommentUserList2" resultMap="MyCommentUser2ResultMap">
		select * from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<select id="selectComment" parameterType="int" resultType="MyComment1">
		select * from mycomment where comment_no=#{commentNo}
	</select>
	
	<resultMap type="MyCommentReply" id="myCommentReplyResultMap">
		<id column="comment_no" property="commentNo"/>
		<result column="comment_id" property="commentId"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_date" property="commentDate"/>
		
		<!-- collection : 1:N 관계의 테이블 조인결과를 클래스의 콜렉션 
		필드(포함) 요소에 매핑하기 위한 엘리먼트 -->
		<!-- property 속성 : 콜렉션 필드명(List 인스턴스)을 속성값으로 설정 -->
		<!-- ofType 속성 : 콜렉션 필드의 요소에 대한 Java 자료형을 속성값으로 설정 -->
		<collection property="replies" ofType="MyReply">
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>			
		</collection>
	</resultMap>
	
	<!-- 댓글이 존재하지 않는 게시글도 검색되도록 LEFT OUTER JOIN 사용 -->
	<select id="selectCommentReply" parameterType="int" resultMap="myCommentReplyResultMap">
		select * from mycomment left join myreply on comment_no=reply_comment_no 
			where comment_no=#{commentNo} order by reply_no desc
	</select>
	
	<!-- resultMap 엘리먼트의 하위 엘리먼트 선언 순서 -->
	<!-- => constructor > id > result > association > collection -->
	<!-- association 엘리먼트로 매핑 설정을 시작하는 경우 내부적으로 selectOne() 메소드를 호출하여 단일행 검색결과 매핑 처리 -->
	<!-- 문제점) collection 엘리먼트를 같이 선언하는 경우 다수행 검색결과 발생 - association 엘리먼트로 시작되는 경우 매핑 처리 불가능 -->
	<!-- 해결법) association 엘리먼트보다 다른 엘리먼트를 먼저 선언 -->
	<resultMap type="MyCommentUserReplyUser" id="myCommentUserReplyUserResultMap">
		<id column="comment_no" property="commentNo"/>	
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
		<collection property="replies" ofType="MyReplyUser">
			<association property="reply" javaType="MyReply">
				<id column="reply_no" property="replyNo"/>
				<result column="reply_id" property="replyId"/>		
				<result column="reply_content" property="replyContent"/>		
				<result column="reply_date" property="replyDate"/>		
				<result column="reply_comment_no" property="replyCommentNo"/>		
			</association>
			<!--  
			<association property="user" javaType="MyUser">
				<id column="reply_user_id" property="userId"/>
				<result column="reply_user_name" property="userName"/>	
			</association>
			-->
			<!-- columnPrefix 속성 : 컬럼명 앞에 추가하고자 하는 문자열을 속성값으로 설정 -->
			<association property="user" javaType="MyUser" columnPrefix="reply_">
				<id column="user_id" property="userId"/>
				<result column="user_name" property="userName"/>	
			</association>
		</collection>
	</resultMap>
	
	<select id="selectCommentUserReplyUser" parameterType="int" resultMap="myCommentUserReplyUserResultMap">
		select * from mycomment join myuser on comment_id=user_id left join 
		    (select myreply.*,user_id reply_user_id,user_name reply_user_name 
		    from myreply join myuser on reply_id=user_id) on comment_no=reply_comment_no 
		    where comment_no=#{commentNo} order by reply_no desc
	</select>
</mapper>